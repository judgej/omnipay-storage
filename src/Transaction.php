<?php

namespace Omnipay\Storage;

abstract class Transaction
{
    protected $storage;

    protected $fields = array();

    protected $dirty = false;

    /*
     * Inject a concrete storage class.
     */
    public function __construct(StorageInterface $storage)
    {
        $this->storage = $storage;
    }

    /**
     * Get a transaction by its storage ID.
     * This is the ID generated by the storage mechanism.
     */
    public function getById($id)
    {
        // TODO: what do we actually return?
    }

    /**
     * Get a transaction by its transaction ID.
     * This is the merchant generated ID, defined locally in the application.
     */
    public function getByTransactionId($transaction_id)
    {
    }

    /**
     * Get a transaction by its transaction reference.
     * This is the gateway generated ID, generated by the remote gatway.
     */
    public function getByTransactionReference($transaction_reference)
    {
    }

    /**
     * Save the transaction.
     * Returns the storage ID.
     */
    public function save()
    {
        if ($this->dirty) {
            // ...
        }
    }

    /**
     * Create a new transaction.
     */
    public function new()
    {
    }

    /**
     * Magic function setter for all other fields.
     */
    public function __set($property, $value)
    {
        $this->fields[$property] = $value;

        $this->dirty = true;
    }

    /**
     * Magic function getter for all other fields.
     */
    public function __get($property, $default == '')
    {
        if (isset($this->fields[$property])) {
            return $this->fields[$property];
        } else {
            return $default;
        }
    }
}
