<?php

namespace Omnipay\Storage;

use Omnipay\Common\Message\AbstractResponse as AbstractResponse;

class Transaction
{
    protected $storage;

    protected $fields = array();

    protected $dirty = false;

    /*
     * Inject a concrete storage class.
     */
    public function __construct(StorageInterface $storage)
    {
        $this->storage = $storage;
    }

    /**
     * Get a transaction by its storage ID.
     * This is the ID generated by the storage mechanism.
     */
    public function getById($id)
    {
        // TODO: what do we actually return?
    }

    /**
     * Get a transaction by its transaction ID.
     * This is the merchant generated ID, defined locally in the application.
     */
    public function getByTransactionId($transaction_id)
    {
        return $this->storage->getByTransactionId($transaction_id);
    }

    /**
     * Get a transaction by its transaction reference.
     * This is the gateway generated ID, generated by the remote gatway.
     */
    public function getByTransactionReference($transaction_reference)
    {
        return $this->storage->getByTransactionReference($transaction_reference);
    }

    /**
     * Set the initial response; the response from the first send() to the OmniPay gateway.
     */
    public function setFirstResponse(AbstractResponse $response)
    {
       $this->setTransactionId($response->getRequest()->getTransactionId());
       $this->setAmount($response->getRequest()->getAmount());
       $this->setStatus($response->getCode());
       $this->setMessage($response->getMessage());
    }

    /**
     * Set the transactino amount.
     * This is sometimes used for validation in the callback.
     */
    public function setAmount($amount)
    {
        $this->storage->setAmount($amount);
        $this->dirty = true;
    }

    /**
     * Get the transactino amount.
     * This is sometimes used for validation in the callback.
     */
    public function getAmount()
    {
        return $this->storage->getAmount($amount);
    }

    /**
     * Set the transactino ID.
     */
    public function setTransactionId($transaction_id)
    {
        $this->storage->setTransactionId($transaction_id);
        $this->dirty = true;
    }

    /**
     * Set the transactino overall status code.
     */
    public function setStatus($status_code)
    {
        $this->storage->setStatus($status_code);
        $this->dirty = true;
    }

    /**
     * Set the transaction status reason message.
     */
    public function setMessage($status_reason)
    {
        $this->storage->setMessage($status_reason);
        $this->dirty = true;
    }

    /**
     * Set the callback status code.
     * The storage driver may also force a knock-on effect on the overall status too.
     */
    public function setCallbackStatus($status_code)
    {
        $this->storage->setCallbackStatus($status_code);
        $this->dirty = true;
    }

    /**
     * Set the gateway context.
     * This will identify a unique gateway instance by name.
     */
    public function setContext($context_name)
    {
        $this->storage->setContext($context_name);
        $this->dirty = true;
    }

    /**
     * Save the transaction.
     * Returns the storage ID.
     */
    public function save()
    {
        if ($this->dirty) {
            $this->storage->save();

            $this->dirty = false;
        }
    }

    // Get/set for always-supported fields.
    // * transaction id (unique, merchant)
    // * transaction reference
    // * Overall status
    // * Callback status
    // * Status reason
    // * Gateway context (a local name)
    // * Request data (strip out CC details!)
    // * Callback data

    /**
     * Magic function setter for all other fields.
     */
    public function __set($property, $value)
    {
        $this->fields[$property] = $value;

        $this->dirty = true;
    }

    /**
     * Magic function getter for all other fields.
     */
    public function __get($property)
    {
        if (isset($this->fields[$property])) {
            return $this->fields[$property];
        } else {
            return null;
        }
    }
}
