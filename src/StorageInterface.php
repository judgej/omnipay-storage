<?php

namespace Omnipay\Storage;

/**
 * This interface supports the physical storage, updates
 * and retrieval if transactions.
 */

interface StorageInterface
{
    /**
     * Save the transaction to storage.
     */
    function save();

    /**
     * Set the transactino ID.
     */
    public function setTransactionId($transaction_id);

    /**
     * Set the transactino overall status code.
     */
    public function setStatus($status_code);

    /**
     * Set the transaction reference provided by the gateway.
     */
    public function setTransactionReference($reference);

    /**
     * Set all the callback data, for use when debugging and likely to use
     * when returning the user to the merchant site.
     */
    public function setCallbackData($data);

    /**
     * Set the transaction status reason message.
     */
    public function setMessage($status_reason);

    /**
     * Set the gateway context.
     * This will identify a unique gateway instance by name.
     */
    public function setContext($context_name);

    /**
     * Get a transaction by its transaction ID.
     * This is the merchant generated ID, defined locally in the application.
     */
    public function getByTransactionId($transaction_id);

    /**
     * Get a transaction by its transaction reference.
     * This is the gateway generated ID, generated by the remote gatway.
     */
    public function getByTransactionReference($transaction_reference);

    /**
     * Set the callback status code.
     * The storage driver may also force a knock-on effect on the overall status too.
     */
    public function setCallbackStatus($status_code);

    /**
     * Set the transactino amount.
     * This is sometimes used for validation in the callback.
     */
    public function setAmount($amount);

    /**
     * Get the transactino amount.
     * This is sometimes used for validation in the callback.
     */
    public function getAmount();
}
